// (function ($, window, undefined) {
// 
//   var
//     methods  = {},
//     Mustache = window.Mustache.to_html ? window.Mustache : false,
//     defaults,
//     menuTemplate;
// 
//   // Setup the default options
//   defaults = {
//     onChange : $.noop
//   }
// 
//   // Template for the dropdown menu
//   menuTemplate = [
//     '<div class="dropkick_container" id="dropkick_container_{{ id }}">',
//       '<a href="#" class="dropkick_toggle">',
//         '<span class="dropkick_label">{{ label }}</span>',
//         '<span class="dropkick_arrows">&#8227;</span>',
//       '</a>',
//       '<menu class="dropkick_options">',
//       '<div class="dropkick_options_inner">',
//           '{{#options}}',
//             '<li><a data-dk-menu-value="{{ value }}" class="{{ current }}">{{ text }}</a></li>',
//           '{{/options}}',
//         '</div>',
//       '</menu>',
//     '</div>'
//   ].join('');
// 
//   // public methods
//   methods.init = function (settings) {
//     settings = $.extend({}, defaults, settings);
// 
//     return this.each(function () {
//       var
//         select       = $(this),
//         id           = select.attr('name'),
//         options      = select.find('option'),
//         selected     = select.find(':selected'),
//         templateVars = {},
//         minWidth     = 0,
//         data         = $(this).data('dropkick'),
//         html         = '',
//         newMenu
//       ;
// 
//       if (data) return this;
// 
//       templateVars.options = [];
//       templateVars.label   = selected.text();
//       templateVars.name    = select.attr('name');
//       templateVars.value   = selected.val();
//       templateVars.id      = id;
// 
//       for (var i = 0, l = options.length; i < l; i++) {
//         var width = options.eq(i).text().length * 6;
// 
//         if (width > minWidth) minWidth = width;
// 
//         templateVars.options[templateVars.options.length] = {
//           value    : options.eq(i).val(),
//           current  : (options.eq(i).attr('selected') === 'selected') ? 'dropkick_option_current' : '',
//           text     : options.eq(i).text()
//         }
// 
//       }
// 
//       html = _render(menuTemplate, templateVars);
//       select.hide().before(html);
// 
//       newMenu = $('#dropkick_container_' + id);
// 
//       newMenu.find('.dropkick_toggle').css({
//         'width' : minWidth + 'px'
//       });
// 
//       $(this).data('dropkick', {
//         settings : settings,
//         menu     : newMenu,
//         selected : selected,
//         id       : id
//       });
// 
//       newMenu.find('.dropkick_toggle').live('click', function (e) {
//         var thisMenu = $(this).parents('.dropkick_container').first();
// 
//         $('.dropkick_container.open').not(thisMenu).removeClass('open');
//         thisMenu.toggleClass('open');
// 
//         e.preventDefault();
//         return false;
//       });
// 
//       newMenu.find('.dropkick_options a').live('click', function (e) {
//         var el = $(this);
//         var value = el.attr('data-dk-menu-value'), label = el.text();
// 
//         _updateMenu.call(el, value, label, newMenu);
//         _updateSelect.call(select, value);
// 
//         var data = {
//           option_value: value,
//           option_label: label
//         };
// 
//         if ($.isFunction(settings.onChange)) settings.onChange(data, el, newMenu);
// 
//         e.preventDefault();
//         return false;
//       });
//     });
//   }
// 
//   methods.reset = function () {
//     var data = this.data('dropkick'), value = data.selected.val(), label = data.selected.text();
// 
//     _updateMenu.call(data.selected, value, label, data.menu);
//   }
// 
//   // private
//   function _updateMenu(value, label, menu) {
//     var data = {
//       option_value: value,
//       option_label: label
//     };
// 
//     $('.dropkick_options .dropkick_option_current', '.dropkick_container').removeClass('dropkick_option_current');
//     this.addClass('dropkick_option_current');
// 
//     _closeMenu(menu);
//     menu.find('.dropkick_label').text(label);
//   }
// 
//   function _updateSelect(value) {
//     this.val(value.toString());
//     return value;
//   }
// 
//   function _closeMenu(menu) {
//     menu.removeClass('open');
//   }
// 
//   function _render(tpl, view) {
//     if (Mustache) {
//       return Mustache.to_html(tpl, view);
//     } else {
// 
//     }
//   }
// 
//   // function _bindMenu (menu, settings) {
//   //   var options = menu.find('.dropkick_options a');
//   // 
//   //   menu.find('.dropkick_toggle').live('click', function (evt) {
//   //     _handleMenuToggle(evt, menu, settings);
//   //   });
//   // 
//   //   menu.find('.dropkick_options a').live('click', function (evt) {
//   //     _handleMenuClick($(this), evt, menu, settings)
//   //     evt.preventDefault();
//   //     return false;
//   //   });
//   // 
//   // }
//   // 
//   // function _handleMenuToggle (evt, menu, settings) {
//   //   menu.toggleClass('open');
//   //   if (settings.animate) {
//   //     if (menu.hasClass('open')) {
//   //       menu.find('.dropkick_options').hide().show(settings.animateSpeed);
//   //     } else {
//   //       menu.find('.dropkick_options').show().hide(100);
//   //     }
//   //   }
//   //   evt.preventDefault();
//   //   return false;
//   // }
//   // 
//   // function _handleMenuClick (option, evt, menu, settings) {
//   //   var value, label, data;
//   // 
//   //   value = option.attr('data-dk-menu-value');
//   //   label = option.text();
//   // 
//   //   data = {
//   //     option_value : value,
//   //     option_label : label
//   //   };
//   // 
//   //   menu.find('input').attr('value', value);
//   //   menu.find('.dropkick_label').text(label);
//   //   menu.find('.dropkick_option_current').removeClass('dropkick_option_current');
//   // 
//   //   option.addClass('dropkick_option_current');
//   // 
//   //   _handleMenuToggle(evt, menu, settings);
//   //   if ($.isFunction(settings.onChange)) settings.onChange(data, option, menu);
//   // 
//   //   evt.preventDefault();
//   //   return false;
//   // }
// 
//   $.fn.dropkick = function (method) {
//     if (methods[method]) {
//       return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
//     } else if (typeof method === 'object' || ! method) {
//       return methods.init.apply(this, arguments);
//     }
//   }
// 
// })(jQuery, window);